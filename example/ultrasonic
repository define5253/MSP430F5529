#define BIT0 (0x0001)
#define BIT1 (0x0002)
#define BIT2 (0x0004)
#define BIT3 (0x0008)
#define BIT4 (0x0010)
#define BIT5 (0x0020)
#define BIT6 (0x0040)
#define BIT7 (0x0080)
#define BIT8 (0x0100)
#define BIT9 (0x0200)
#define BITA (0x0400)
#define BITB (0x0800)
#define BITC (0x1000)
#define BITD (0x2000)
#define BITE (0x4000)
#define BITF (0x8000)

#include <msp430.h>
//7segment pin ->f c dp b a g e d
const unsigned char segment_map[10] = { 0b11011011, // 0 ok
        0b01010000, // 1 ok
        0b00011111, // 2 ok
        0b01011101, // 3 ok
        0b11010100, // 4 ok
        0b11001101, // 5 ok
        0b11001111, // 6 ok
        0b01011000, // 7 ok
        0b11011111, // 8 ok
        0b11011100  // 9 ok
        };

unsigned int duration = 0;
unsigned int displaytime = 0;
unsigned int display = 0;
unsigned int time = 0;
volatile unsigned int digitnum = 0;

void Display()
{
    static unsigned int display1, display2, display3, display4;
    switch (digitnum)
    {
    case 0:
        display1 = display % 1000 % 100 % 10;
        P3OUT = segment_map[display1];
        P4OUT |= (BIT1 | BIT2 | BIT3);
        P4OUT &= ~BIT0;
        digitnum = 1;
        break;
    case 1:
        display2 = display % 1000 % 100 / 10;
        P3OUT = segment_map[display2];
        P4OUT |= (BIT2 | BIT3 | BIT0);
        P4OUT &= ~BIT1;
        digitnum = 2;
        break;
    case 2:
        display3 = display % 1000 / 100;
        P3OUT = segment_map[display3];
        P4OUT |= (BIT3 | BIT0 | BIT1);
        P4OUT &= ~BIT2;
        digitnum = 3;
        break;
    case 3:
        display4 = display / 1000;
        P3OUT = segment_map[display4];
        P4OUT |= (BIT0 | BIT1 | BIT2);
        P4OUT &= ~BIT3;
        digitnum = 0;
        break;
    }
}
void main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer

    // P2.7 : TRIG
    P2DIR |= BIT7;
    P2OUT &= ~(BIT7);
    // P1.4 : ECHO
    P1SEL |= BIT4;
    P1DIR &= (~BIT4);
    P1IE |= BIT4;
    P1IES &= (~BIT4); //RISING EDGE
    P1IFG &= (~BIT4);

    //TIMER INTERRUPT
    TA0CTL = TASSEL_2 + MC_1 + ID_0 + TACLR; // SMCLK : 1MHZ ->1us
    TA0CCR0 = 10; //10us
    TA0CCTL0 = CCIE;

    //7SEGMENT
    P3DIR |= 0xFF; // P3.0-P3.7 output 설정
    P3OUT &= ~0xFF; // P3.0-P3.7 clear
    P4DIR |= (BIT0 | BIT1 | BIT2 | BIT3);
    P4OUT = BIT1 + BIT2 + BIT3;

    __bis_SR_register(GIE);

    while (1)
    {
        Display();
    }
}
#pragma vector = PORT1_VECTOR
__interrupt
void Port_1(void)
{
    if ((P1IES & BIT4) == 0) //rising edge
    {
        duration = time;
        P1IES |= BIT4; //falling Edge
    }
    else //falling edge
    {
        duration = (time - duration) / 58;
        P1IES &= ~BIT4; //rising Edge
    }
    P1IFG &= (~BIT4); //interrupt clr
    duration = 2024;
}

#pragma vector = TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
    Display();
    if (time == 0)
    {
        P2OUT |= BIT7;
        time++;
    }
    else if (time == 1) //10us면 TRIG OFF
    {
        P2OUT &= ~BIT7;
        time++;
    }
    else if (time > 5000) //10us *5000 =50ms
    {
        time = 0;
    }
    displaytime++;
    if (displaytime > 500)
    {
        displaytime = 0;
        display++;
    }
}


